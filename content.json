{"meta":{"title":"JOKING","subtitle":null,"description":"个人博客","author":"JOKING","url":"http://jokinglove.com/knowledge"},"pages":[{},{},{}],"posts":[{"title":"git 笔记-1","date":"2017-06-17T14:00:58.000Z","path":"2017/06/17/git-note1/","text":"今天看到一个博客中对git几个命令的总结，感觉讲的通俗易懂，借过来记一笔 需求：B要加入A的项目，不论是作为B的初始项目进行二次开发还是成为A项目的一员加入一起开发，步骤如下： 1.B首先要fork一个。B首先到A的github上，也就是此项目的位置:https://github.com/A/durit，然后单击fork，然后你（B）的github上就出现了一个fork，位置是：https://github.com/B/durit 2.B把自己的fork克隆到本地。1$ git clone https://github.com/B/durit (当你clone到本地，会有一个默认的远程名叫”origin”，它指向了fork on github，也就是B上的fork，而不是指向) 3.现在你是主人，为了保持与A的durit的联系，你需要给A的durit起个名，供你来驱使。12$ cd durit$ git remote add upstream https://github.com/A/durit (现在改名为upstream，这名随意，现在你（B）管A的durit叫upstream，以后B就用upstream来和A的durit联系了) 4.获取A上的更新(但不会修改你的文件)。1$ git fetch upstream （这不，现在B就用upstream来联系A了） 5.合并拉取的数据1$ git merge upstream/master （又联系了一次，upstream/master，前者是你要合并的数据，后者是你要合并到的数据（在这里就是B本地的durit了）） 6.在B修改了本地部分内容后，把本地的更改推送到B的远程github上。123$ git add 修改过的文件$ git commit -m \"注释\"$ git push origin master （目前为止，B上的github就跟新了） 7.然后B还想让修改过的内容也推送到A上，这就要发起pull request了。打开B的github,也就是https://github.com/B/durit点击Pull Requests单击new pull request单击create pull request输入title和你更改的内容然后单击send pull request这样B就完成了工作，然后就等着主人A来操作了。 8.在B想要更新A的github上到内容时，结果冲突，因为B和A同时修改了文件，比如说是README.ME，该这样做： 123$ git status(查看冲突文件) //找到冲突文件(README.MD)后，打开并修改，解决冲突后$ git add README.MD$ git commit -m \"解决了冲突文件README.MD\" 现在冲突解决了，可以更新A的内容了，也就是上面第4步和第5步","raw":"---\ntitle: git 笔记-1\ndate: 2017-06-17 22:00:58\ncategories: git\ntags: joking\n---\n\n今天看到一个博客中对git几个命令的总结，感觉讲的通俗易懂，借过来记一笔\n- 需求：B要加入A的项目，不论是作为B的初始项目进行二次开发还是成为A项目的一员加入一起开发，步骤如下：\n- 1.B首先要fork一个。\nB首先到A的github上，也就是此项目的位置:https://github.com/A/durit，然后单击fork，然后你（B）的github上就出现了一个fork，位置是：https://github.com/B/durit\n- 2.B把自己的fork克隆到本地。\n```bash\n$ git clone https://github.com/B/durit\n```\n(当你clone到本地，会有一个默认的远程名叫\"origin\"，它指向了fork on github，也就是B上的fork，而不是指向)\n\n- 3.现在你是主人，为了保持与A的durit的联系，你需要给A的durit起个名，供你来驱使。\n```bash\n$ cd durit\n$ git remote add upstream https://github.com/A/durit\n```\n(现在改名为upstream，这名随意，现在你（B）管A的durit叫upstream，以后B就用upstream来和A的durit联系了)\n\n- 4.获取A上的更新(但不会修改你的文件)。\n```bash\n$ git fetch upstream\n```\n（这不，现在B就用upstream来联系A了）\n\n- 5.合并拉取的数据\n```bash\n$ git merge upstream/master\n```\n（又联系了一次，upstream/master，前者是你要合并的数据，后者是你要合并到的数据（在这里就是B本地的durit了））\n- 6.在B修改了本地部分内容后，把本地的更改推送到B的远程github上。\n```bash\n$ git add 修改过的文件\n$ git commit -m \"注释\"\n$ git push origin master\n```\n（目前为止，B上的github就跟新了）\n\n- 7.然后B还想让修改过的内容也推送到A上，这就要发起pull request了。\n 打开B的github,也就是https://github.com/B/durit\n 点击Pull Requests\n 单击new pull request\n 单击create pull request\n 输入title和你更改的内容\n 然后单击send pull request\n 这样B就完成了工作，然后就等着主人A来操作了。\n\n- 8.在B想要更新A的github上到内容时，结果冲突，因为B和A同时修改了文件，比如说是README.ME，该这样做：\n```bash\n$ git status(查看冲突文件) //找到冲突文件(README.MD)后，打开并修改，解决冲突后\n$ git add README.MD\n$ git commit -m \"解决了冲突文件README.MD\"\n```\n现在冲突解决了，可以更新A的内容了，也就是上面第4步和第5步","content":"<p>今天看到一个博客中对git几个命令的总结，感觉讲的通俗易懂，借过来记一笔</p>\n<ul>\n<li>需求：B要加入A的项目，不论是作为B的初始项目进行二次开发还是成为A项目的一员加入一起开发，步骤如下：</li>\n<li>1.B首先要fork一个。<br>B首先到A的github上，也就是此项目的位置:<a href=\"https://github.com/A/durit，然后单击fork，然后你（B）的github上就出现了一个fork，位置是：https://github.com/B/durit\" target=\"_blank\" rel=\"external\">https://github.com/A/durit，然后单击fork，然后你（B）的github上就出现了一个fork，位置是：https://github.com/B/durit</a></li>\n<li>2.B把自己的fork克隆到本地。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/B/durit</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>(当你clone到本地，会有一个默认的远程名叫”origin”，它指向了fork on github，也就是B上的fork，而不是指向)</p>\n<ul>\n<li>3.现在你是主人，为了保持与A的durit的联系，你需要给A的durit起个名，供你来驱使。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> durit</div><div class=\"line\">$ git remote add upstream https://github.com/A/durit</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>(现在改名为upstream，这名随意，现在你（B）管A的durit叫upstream，以后B就用upstream来和A的durit联系了)</p>\n<ul>\n<li>4.获取A上的更新(但不会修改你的文件)。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch upstream</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（这不，现在B就用upstream来联系A了）</p>\n<ul>\n<li>5.合并拉取的数据<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge upstream/master</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（又联系了一次，upstream/master，前者是你要合并的数据，后者是你要合并到的数据（在这里就是B本地的durit了））</p>\n<ul>\n<li>6.在B修改了本地部分内容后，把本地的更改推送到B的远程github上。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add 修改过的文件</div><div class=\"line\">$ git commit -m <span class=\"string\">\"注释\"</span></div><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（目前为止，B上的github就跟新了）</p>\n<ul>\n<li><p>7.然后B还想让修改过的内容也推送到A上，这就要发起pull request了。<br>打开B的github,也就是<a href=\"https://github.com/B/durit\" target=\"_blank\" rel=\"external\">https://github.com/B/durit</a><br>点击Pull Requests<br>单击new pull request<br>单击create pull request<br>输入title和你更改的内容<br>然后单击send pull request<br>这样B就完成了工作，然后就等着主人A来操作了。</p>\n</li>\n<li><p>8.在B想要更新A的github上到内容时，结果冲突，因为B和A同时修改了文件，比如说是README.ME，该这样做：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status(查看冲突文件) //找到冲突文件(README.MD)后，打开并修改，解决冲突后</div><div class=\"line\">$ git add README.MD</div><div class=\"line\">$ git commit -m <span class=\"string\">\"解决了冲突文件README.MD\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>现在冲突解决了，可以更新A的内容了，也就是上面第4步和第5步</p>\n","slug":"git-note1","updated":"2017-06-17T14:41:50.654Z","comments":true,"link":"","permalink":"http://jokinglove.com/knowledge/2017/06/17/git-note1/","excerpt":"","categories":[{"name":"git","slug":"git","permalink":"http://jokinglove.com/knowledge/categories/git/"}],"tags":[{"name":"joking","slug":"joking","permalink":"http://jokinglove.com/knowledge/tags/joking/"}]},{"title":"python 学习笔记1","date":"2017-06-08T06:02:10.481Z","path":"2017/06/08/python1/","text":"Python3中有六个标准的数据类型： 字符串（String） 数字（Digit） 列表（List） 元组（Tuple） 集合（Sets） 字典（Dictionary） 日期（date） 布尔 (Boolean) 数值 (Number) 整型——int——数字python有5种数字类型，最常见的就是整型int。例如：1234、-1234 布尔型——bool——用符号==表示布尔型是一种比较特殊的python数字类型，它只有True和False两种值，它主要用来比较和判断，所得结果叫做布尔值。例如：3==3 给出True，3==5给出False 字符串——str——用’ ‘或” “表示例如：’www.iplaypython.com’或者”hello” 列表——list——用[ ]符号表示例如：[1,2,3,4] 元组——tuple——用( )符号表示例如：（’d’,300） 字典——dict——用{ }符号表示例如：｛’name’:’coco’,’country’:’china’｝ 更多内容…","raw":"---\ntitle: python 学习笔记1\ncategories: Python\ntags: language\n---\n\n##### Python3中有六个标准的数据类型：\n\n- 字符串（String）</br>\n- 数字（Digit）\n- 列表（List）\n- 元组（Tuple）\n- 集合（Sets）\n- 字典（Dictionary）\n- 日期（date）\n- 布尔 (Boolean)\n- 数值 (Number)\n\n1. 整型——int——数字\npython有5种数字类型，最常见的就是整型int。例如：1234、-1234\n2. 布尔型——bool——用符号==表示\n布尔型是一种比较特殊的python数字类型，它只有True和False两种值，它主要用来比较和判断，所得结果叫做布尔值。例如：3==3 给出True，3==5给出False\n3. 字符串——str——用' '或\" \"表示\n例如：'www.iplaypython.com'或者\"hello\"\n4. 列表——list——用[ ]符号表示\n例如：[1,2,3,4]\n5. 元组——tuple——用( )符号表示\n例如：（'d',300）\n6. 字典——dict——用{ }符号表示\n例如：｛'name':'coco','country':'china'｝\n\n[更多内容...](http://www.diveintopython3.net/)","content":"<h5 id=\"Python3中有六个标准的数据类型：\"><a href=\"#Python3中有六个标准的数据类型：\" class=\"headerlink\" title=\"Python3中有六个标准的数据类型：\"></a>Python3中有六个标准的数据类型：</h5><ul>\n<li>字符串（String）<br></li>\n<li>数字（Digit）</li>\n<li>列表（List）</li>\n<li>元组（Tuple）</li>\n<li>集合（Sets）</li>\n<li>字典（Dictionary）</li>\n<li>日期（date）</li>\n<li>布尔 (Boolean)</li>\n<li>数值 (Number)</li>\n</ul>\n<ol>\n<li>整型——int——数字<br>python有5种数字类型，最常见的就是整型int。例如：1234、-1234</li>\n<li>布尔型——bool——用符号==表示<br>布尔型是一种比较特殊的python数字类型，它只有True和False两种值，它主要用来比较和判断，所得结果叫做布尔值。例如：3==3 给出True，3==5给出False</li>\n<li>字符串——str——用’ ‘或” “表示<br>例如：’www.iplaypython.com’或者”hello”</li>\n<li>列表——list——用[ ]符号表示<br>例如：[1,2,3,4]</li>\n<li>元组——tuple——用( )符号表示<br>例如：（’d’,300）</li>\n<li>字典——dict——用{ }符号表示<br>例如：｛’name’:’coco’,’country’:’china’｝</li>\n</ol>\n<p><a href=\"http://www.diveintopython3.net/\" target=\"_blank\" rel=\"external\">更多内容…</a></p>\n","slug":"python1","updated":"2017-06-17T14:49:56.786Z","comments":true,"link":"","permalink":"http://jokinglove.com/knowledge/2017/06/08/python1/","excerpt":"","categories":[{"name":"Python","slug":"Python","permalink":"http://jokinglove.com/knowledge/categories/Python/"}],"tags":[{"name":"language","slug":"language","permalink":"http://jokinglove.com/knowledge/tags/language/"}]},{"title":"hello hexo","date":"2017-06-07T14:23:40.000Z","path":"2017/06/07/hello-hexo/","text":"","raw":"---\ntitle: hello hexo\ndate: 2017-06-07 22:23:40\ntags:\n---\n","content":"","slug":"hello-hexo","updated":"2017-06-07T14:23:40.904Z","comments":true,"link":"","permalink":"http://jokinglove.com/knowledge/2017/06/07/hello-hexo/","excerpt":"","categories":[],"tags":[]},{"title":"Hello World","date":"2017-06-07T14:18:18.982Z","path":"2017/06/07/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","slug":"hello-world","updated":"2017-04-30T15:46:05.779Z","comments":true,"link":"","permalink":"http://jokinglove.com/knowledge/2017/06/07/hello-world/","excerpt":"","categories":[],"tags":[]},{"title":"hello","date":"2017-04-28T14:00:58.000Z","path":"2017/04/28/hello/","text":"小计一笔作为一个做技术的，对所学的技术总结，分享是很重要的，也希望以后多多总结学到的新的东西，分享出来，做一个记录。和更多的人一起去交流，学习。也许，这样才是学习的真正乐趣。","raw":"---\ntitle: hello\ndate: 2017-04-28 22:00:58\ncategories: 随记\ntags: mr guo\n---\n## 小计一笔\n作为一个做技术的，对所学的技术总结，分享是很重要的，也希望以后多多总结学到的新的东西，分享出来，做一个记录。和更多的人一起去交流，学习。也许，这样才是学习的真正乐趣。\n","content":"<h2 id=\"小计一笔\"><a href=\"#小计一笔\" class=\"headerlink\" title=\"小计一笔\"></a>小计一笔</h2><p>作为一个做技术的，对所学的技术总结，分享是很重要的，也希望以后多多总结学到的新的东西，分享出来，做一个记录。和更多的人一起去交流，学习。也许，这样才是学习的真正乐趣。</p>\n","slug":"hello","updated":"2017-04-30T13:41:08.534Z","comments":true,"link":"","permalink":"http://jokinglove.com/knowledge/2017/04/28/hello/","excerpt":"","categories":[{"name":"随记","slug":"随记","permalink":"http://jokinglove.com/knowledge/categories/随记/"}],"tags":[{"name":"mr guo","slug":"mr-guo","permalink":"http://jokinglove.com/knowledge/tags/mr-guo/"}]}]}